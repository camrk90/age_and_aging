print(paste("Contingency table sum for", i, "matches unique cpg_loc length"))
df_list[[length(df_list)+1]] = c_table
}
}
#name table list
names(df_list)<- unique(model_df$anno_class)
#Fisher test for each table and tidy with broom
ft<- lapply(df_list, fisher.test)
ft<- lapply(ft, broom::tidy)
ft<- do.call(rbind, ft)
ft<- ft %>%
mutate(annotation = rownames(ft))
#FDR p-val adjustment
ft<- ft %>%
mutate(padj = p.adjust(p.value)) %>%
mutate_at(vars(annotation), as.factor)
#Log estimates and CIs
ft<- ft %>%
mutate(log_or = log(estimate),
log_ci.lo = log(conf.low),
log_ci.hi = log(conf.high))
ft$anno_source<- "Repeat Elements"
ft$anno_source[ft$annotation == "Transcription Start Sites" | ft$annotation == "Active Transcription" |
ft$annotation == "Enhancer Regions" | ft$annotation == "Quiescent States" |
ft$annotation == "Promoter"]<- "Transcription"
ft<- ft %>%
arrange(anno_source, log_or)
hyper_levels<- as.character(ft$annotation)
#Rearrange factors to sort by type then log_or
ft$annotation<- factor(ft$annotation, levels = rev(annos))
return(ft)
}
test<- enrichment(pqlseq_anno)
View(test)
enrichment<- function(model_df){
df_list<- list()
for(i in unique(model_df$anno_class)) {
df2<- model_df %>%
filter(anno_class == i) %>%
distinct(unique_cpg, .keep_all = T)
df3<- model_df %>%
distinct(unique_cpg, .keep_all = T) %>%
filter(!unique_cpg %in% df2$unique_cpg)
#Counts for fdr < 0.05 & cpg is Within Positive, Cross Negative
a<- nrow(df2[df2$within_cross == "Both Significant" & df2$direction == "Within Positive, Cross Negative",])
b<- nrow(df3[df3$within_cross == "Both Significant" & df3$direction == "Within Positive, Cross Negative",])
#Counts for NOT fdr < 0.05 & cpg is Within Positive, Cross Negative
c<- nrow(df2[!(df2$within_cross == "Both Significant" & df2$direction == "Within Positive, Cross Negative"),])
d<- nrow(df3[!(df3$within_cross == "Both Significant" & df3$direction == "Within Positive, Cross Negative"),])
#Generate contingency table
c_table<- data.frame("Is_Discordant" = c(a, b),
"Is_NOT_Discordant" = c(c, d),
row.names = c(paste(i, "Y", sep=""), paste(i, "N", sep="")))
if (all.equal(sum(c_table), length(unique(model_df$unique_cpg)))){
print(paste("Contingency table sum for", i, "matches unique cpg_loc length"))
df_list[[length(df_list)+1]] = c_table
print(c_table)
}
}
#name table list
names(df_list)<- unique(model_df$anno_class)
#Fisher test for each table and tidy with broom
ft<- lapply(df_list, fisher.test)
ft<- lapply(ft, broom::tidy)
ft<- do.call(rbind, ft)
ft<- ft %>%
mutate(annotation = rownames(ft))
#FDR p-val adjustment
ft<- ft %>%
mutate(padj = p.adjust(p.value)) %>%
mutate_at(vars(annotation), as.factor)
#Log estimates and CIs
ft<- ft %>%
mutate(log_or = log(estimate),
log_ci.lo = log(conf.low),
log_ci.hi = log(conf.high))
ft$anno_source<- "Repeat Elements"
ft$anno_source[ft$annotation == "Transcription Start Sites" | ft$annotation == "Active Transcription" |
ft$annotation == "Enhancer Regions" | ft$annotation == "Quiescent States" |
ft$annotation == "Promoter"]<- "Transcription"
ft<- ft %>%
arrange(anno_source, log_or)
hyper_levels<- as.character(ft$annotation)
#Rearrange factors to sort by type then log_or
ft$annotation<- factor(ft$annotation, levels = rev(annos))
return(ft)
}
test<- enrichment(pqlseq_anno)
enrichment<- function(model_df){
df_list<- list()
for(i in unique(model_df$anno_class)) {
df2<- model_df %>%
filter(anno_class == i) %>%
distinct(unique_cpg, .keep_all = T)
df3<- model_df %>%
distinct(unique_cpg, .keep_all = T) %>%
filter(!unique_cpg %in% df2$unique_cpg)
#Counts for fdr < 0.05 & cpg is Within Positive, Cross Negative
a<- nrow(df2[df2$within_cross == "Both Significant" & df2$direction == "Within Positive, Cross Negative",])
b<- nrow(df3[df3$within_cross == "Both Significant" & df3$direction == "Within Positive, Cross Negative",])
#Counts for NOT fdr < 0.05 & cpg is Within Positive, Cross Negative
c<- nrow(df2[!(df2$within_cross == "Both Significant" & df2$direction == "Within Positive, Cross Negative"),])
d<- nrow(df3[!(df3$within_cross == "Both Significant" & df3$direction == "Within Positive, Cross Negative"),])
#Generate contingency table
c_table<- data.frame("Is_Discordant" = c(a, b),
"Is_NOT_Discordant" = c(c, d),
row.names = c(paste(i, "Y", sep=""), paste(i, "N", sep="")))
if (all.equal(sum(c_table), length(unique(model_df$unique_cpg)))){
print(paste("Contingency table sum for", i, "matches unique cpg_loc length"))
df_list[[length(df_list)+1]] = c_table
print(c_table)
}
}
#name table list
names(df_list)<- unique(model_df$anno_class)
#Fisher test for each table and tidy with broom
ft<- lapply(df_list, fisher.test)
ft<- lapply(ft, broom::tidy)
ft<- do.call(rbind, ft)
ft<- ft %>%
mutate(annotation = rownames(ft))
#FDR p-val adjustment
ft<- ft %>%
mutate(padj = p.adjust(p.value)) %>%
mutate_at(vars(annotation), as.factor)
#Log estimates and CIs
ft<- ft %>%
mutate(log_or = log(estimate),
log_ci.lo = log(conf.low),
log_ci.hi = log(conf.high))
ft$anno_source<- "Repeat Elements"
ft$anno_source[ft$annotation == "TSSs" | ft$annotation == "Active Tr." |
ft$annotation == "Enhancers" | ft$annotation == "Quiescent" |
ft$annotation == "Promoter"]<- "Transcription"
ft<- ft %>%
arrange(anno_source, log_or)
hyper_levels<- as.character(ft$annotation)
#Rearrange factors to sort by type then log_or
ft$annotation<- factor(ft$annotation, levels = rev(annos))
return(ft)
}
test<- enrichment(pqlseq_anno)
generate_proportion(pqlseq_anno, 'Within Positive, Cross Negative', "steelblue2", "gray90", "steelblue4")
#Plot annotation proportions----------------------------------------------------
generate_proportion<- function(df, x, c1, c2, c3){
d1<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by(anno_class, {{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
print(d1)
d2<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by({{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
d2$anno_class<- "All"
d3<- rbind(d1, d2)
annos2<- unique(d3$anno_class)
d3$anno_class<- factor(d3$anno_class, levels = annos2)
col1 <- eval(substitute(x), d2)
d3 %>%
ggplot(aes(x = perc*100, y=anno_class, fill = factor({{x}}))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
#geom_text(label=df$count, hjust=-5) +
geom_vline(xintercept = (1-d2$perc[col1 == "Age-Hypermethylated"])*100, linetype = 'dashed') +
geom_vline(xintercept = d2$perc[col1 == "Age-Hypomethylated"]*100, linetype = 'dashed') +
theme_classic(base_size=32) +
theme(legend.position = "none") +
scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
}
generate_proportion(pqlseq_anno, 'Within Positive, Cross Negative', "steelblue2", "gray90", "steelblue4")
generate_proportion(pqlseq_anno, chron_signif, "darkgoldenrod4", "gray90", "darkgoldenrod1")
generate_proportion(pqlseq_anno, direction)
#Plot annotation proportions----------------------------------------------------
generate_proportion<- function(df, x){
d1<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by(anno_class, {{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
print(d1)
d2<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by({{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
d2$anno_class<- "All"
d3<- rbind(d1, d2)
annos2<- unique(d3$anno_class)
d3$anno_class<- factor(d3$anno_class, levels = annos2)
col1 <- eval(substitute(x), d2)
d3 %>%
ggplot(aes(x = perc*100, y=anno_class, fill = factor({{x}}))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
#geom_text(label=df$count, hjust=-5) +
geom_vline(xintercept = (1-d2$perc[col1 == "Age-Hypermethylated"])*100, linetype = 'dashed') +
geom_vline(xintercept = d2$perc[col1 == "Age-Hypomethylated"]*100, linetype = 'dashed') +
theme_classic(base_size=32) +
theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
}
generate_proportion(pqlseq_anno, direction)
d3 %>%
ggplot(aes(x = perc*100, y=anno_class, fill = factor({{x}}))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
#geom_text(label=df$count, hjust=-5) +
geom_vline(xintercept = (1-d2$perc[col1 == "Age-Hypermethylated"])*100, linetype = 'dashed') +
geom_vline(xintercept = d2$perc[col1 == "Age-Hypomethylated"]*100, linetype = 'dashed') +
theme_classic(base_size=32) +
#theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
generate_proportion(pqlseq_anno, direction)
#Plot annotation proportions----------------------------------------------------
generate_proportion<- function(df, x){
d1<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by(anno_class, {{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
print(d1)
d2<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by({{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
d2$anno_class<- "All"
d3<- rbind(d1, d2)
annos2<- unique(d3$anno_class)
d3$anno_class<- factor(d3$anno_class, levels = annos2)
col1 <- eval(substitute(x), d2)
d3 %>%
ggplot(aes(x = perc*100, y=anno_class, fill = factor({{x}}))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
#geom_text(label=df$count, hjust=-5) +
geom_vline(xintercept = (1-d2$perc[col1 == "Age-Hypermethylated"])*100, linetype = 'dashed') +
geom_vline(xintercept = d2$perc[col1 == "Age-Hypomethylated"]*100, linetype = 'dashed') +
theme_classic(base_size=32) +
#theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
}
generate_proportion(pqlseq_anno, direction)
#Enrichment Analyses------------------------------------------------------------
pqlseq_anno$direction<- "Non-Significant"
pqlseq_anno$direction[pqlseq_anno$beta_within_age < 0 & pqlseq_anno$beta_long_cross < 0 & fdr_within_age < .05 & fdr_long_cross < .05]<-"Both Negative"
pqlseq_anno$direction<- "Non-Significant"
pqlseq_anno$direction[pqlseq_anno$beta_within_age < 0 & pqlseq_anno$beta_long_cross < 0 &
pqlseq_anno$fdr_within_age < .05 & pqlseq_anno$fdr_long_cross < .05]<-"Both Negative"
pqlseq_anno$direction[pqlseq_anno$beta_within_age > 0 & pqlseq_anno$beta_long_cross > 0 &
pqlseq_anno$fdr_within_age < .05 & pqlseq_anno$fdr_long_cross < .05]<- "Both Positive"
pqlseq_anno$direction[pqlseq_anno$beta_within_age < 0 & pqlseq_anno$beta_long_cross > 0 &
pqlseq_anno$fdr_within_age < .05 & pqlseq_anno$fdr_long_cross < .05]<- "Within Negative, Cross Positive"
pqlseq_anno$direction[pqlseq_anno$beta_within_age > 0 & pqlseq_anno$beta_long_cross < 0 &
pqlseq_anno$fdr_within_age < .05 & pqlseq_anno$fdr_long_cross < .05]<- "Within Positive, Cross Negative"
generate_proportion(pqlseq_anno, direction)
#Plot annotation proportions----------------------------------------------------
generate_proportion<- function(df, x){
d1<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by(anno_class, {{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
print(d1)
d2<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by({{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
d2$anno_class<- "All"
d3<- rbind(d1, d2)
annos2<- unique(d3$anno_class)
d3$anno_class<- factor(d3$anno_class, levels = annos2)
col1 <- eval(substitute(x), d2)
d3 %>%
ggplot(aes(x = perc*100, y=anno_class, fill = factor({{x}}))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
#geom_text(label=df$count, hjust=-5) +
geom_vline(xintercept = (1-d2$perc[col1 == "Age-Hypermethylated"])*100, linetype = 'dashed') +
geom_vline(xintercept = d2$perc[col1 == "Age-Hypomethylated"]*100, linetype = 'dashed') +
theme_classic(base_size=32) +
#theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
return(d3)
}
generate_proportion(pqlseq_anno, direction)
pqlseq_anno$direction[(pqlseq_anno$beta_within_age < 0 & pqlseq_anno$beta_long_cross < 0) &
(pqlseq_anno$fdr_within_age < .05 | pqlseq_anno$fdr_long_cross < .05)]<-"Both Negative"
pqlseq_anno$direction<- "Non-Significant"
pqlseq_anno$direction[(pqlseq_anno$beta_within_age < 0 & pqlseq_anno$beta_long_cross < 0) &
(pqlseq_anno$fdr_within_age < .05 | pqlseq_anno$fdr_long_cross < .05)]<-"Both Negative"
pqlseq_anno$direction[(pqlseq_anno$beta_within_age > 0 & pqlseq_anno$beta_long_cross > 0) &
(pqlseq_anno$fdr_within_age < .05 | pqlseq_anno$fdr_long_cross < .05)]<- "Both Positive"
pqlseq_anno$direction[(pqlseq_anno$beta_within_age < 0 & pqlseq_anno$beta_long_cross > 0) &
(pqlseq_anno$fdr_within_age < .05 | pqlseq_anno$fdr_long_cross < .05)]<- "Within Negative, Cross Positive"
pqlseq_anno$direction[(pqlseq_anno$beta_within_age > 0 & pqlseq_anno$beta_long_cross < 0) &
(pqlseq_anno$fdr_within_age < .05 | pqlseq_anno$fdr_long_cross < .05)]<- "Within Positive, Cross Negative"
generate_proportion(pqlseq_anno, direction)
#Plot annotation proportions----------------------------------------------------
generate_proportion<- function(df, x){
d1<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by(anno_class, {{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
print(d1)
d2<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by({{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
d2$anno_class<- "All"
d3<- rbind(d1, d2)
annos2<- unique(d3$anno_class)
d3$anno_class<- factor(d3$anno_class, levels = annos2)
col1 <- eval(substitute(x), d2)
d3 %>%
ggplot(aes(x = perc*100, y=anno_class, fill = factor({{x}}))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
#geom_text(label=df$count, hjust=-5) +
geom_vline(xintercept = (1-d2$perc[col1 == "Age-Hypermethylated"])*100, linetype = 'dashed') +
geom_vline(xintercept = d2$perc[col1 == "Age-Hypomethylated"]*100, linetype = 'dashed') +
theme_classic(base_size=32) +
#theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
return(d3)
}
generate_proportion(pqlseq_anno, direction)
#Plot annotation proportions----------------------------------------------------
generate_proportion<- function(df, x){
d1<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by(anno_class, {{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
print(d1)
d2<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by({{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
d2$anno_class<- "All"
d3<- rbind(d1, d2)
annos2<- unique(d3$anno_class)
d3$anno_class<- factor(d3$anno_class, levels = annos2)
col1 <- eval(substitute(x), d2)
return(d3)
}
df<- generate_proportion(pqlseq_anno, direction)
View(df)
df<- df %>%
mutate(percent = percent*100)
df<- df %>%
mutate(percent = perc*100)
View(df)
df %>%
ggplot(aes(x = percent, y=anno_class, fill = factor(direction))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
theme_classic(base_size=32) +
#theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
df %>%
ggplot(aes(x = perc*100, y=anno_class, fill = factor(direction))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
theme_classic(base_size=32) +
#theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
df$percent<- df$perc*100
View(df)
#Plot annotation proportions----------------------------------------------------
generate_proportion<- function(df, x){
d1<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by(anno_class, {{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
print(d1)
d2<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by({{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
d2$anno_class<- "All"
d3<- rbind(d1, d2)
annos2<- unique(d3$anno_class)
d3$anno_class<- factor(d3$anno_class, levels = annos2)
col1 <- eval(substitute(x), d2)
d3$percent<- d3$percent*100
d3 %>%
ggplot(aes(x = percent, y=anno_class, fill = factor({{x}}))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
theme_classic(base_size=32) +
#geom_vline(xintercept = (1-d2$perc[col1 == "Age-Hypermethylated"])*100, linetype = 'dashed') +
#geom_vline(xintercept = d2$perc[col1 == "Age-Hypomethylated"]*100, linetype = 'dashed') +
#theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
}
df<- generate_proportion(pqlseq_anno, direction)
#Plot annotation proportions----------------------------------------------------
generate_proportion<- function(df, x){
d1<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by(anno_class, {{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
print(d1)
d2<- df %>%
distinct(unique_cpg, .keep_all = T) %>%
group_by({{x}}) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
d2$anno_class<- "All"
d3<- rbind(d1, d2)
annos2<- unique(d3$anno_class)
d3$anno_class<- factor(d3$anno_class, levels = annos2)
col1 <- eval(substitute(x), d2)
d3$percent<- d3$perc*100
d3 %>%
ggplot(aes(x = percent, y=anno_class, fill = factor({{x}}))) +
geom_bar(stat="identity", width = 0.7, colour="black") +
theme_classic(base_size=32) +
#geom_vline(xintercept = (1-d2$perc[col1 == "Age-Hypermethylated"])*100, linetype = 'dashed') +
#geom_vline(xintercept = d2$perc[col1 == "Age-Hypomethylated"]*100, linetype = 'dashed') +
#theme(legend.position = "none") +
#scale_fill_manual(values = c(c1, c2, c3)) +
ylab("Annotation") +
xlab("Percentage")
}
generate_proportion(pqlseq_anno, direction)
View(test)
library(tidyverse)
library(ggplot2)
library(ggcorrplot)
library(ggvenn)
library(variancePartition)
library(lme4)
load("/scratch/ckelsey4/Cayo_meth/cross_within_compare.RData")
#Eq. 3
age_eq3_files<- 'wb_pqlseq2_eq3'
age_eq3_pqlseq<- import_pqlseq(age_eq3_files, y = 4)
#Import longitudinal pqlseq files
setwd('/scratch/ckelsey4/Cayo_meth/glmer_model_compare')
#Eq. 3
age_eq3_files<- 'wb_pqlseq2_eq3'
age_eq3_pqlseq<- import_pqlseq(age_eq3_files, y = 4)
age_eq3<- age_eq3_pqlseq %>%
select(c(outcome, beta, fdr))
colnames(age_eq3)<- c("outcome", "eq3_beta", "eq3_fdr")
age_w<- age_w_pqlseq  %>%
select(c(outcome, beta, fdr))
age_w<- age_w[age_w$outcome %in% age_eq3$outcome,]
age_w<- age_w_pqlseq  %>%
select(c(outcome, beta, fdr))
#Chronological Age
chron_age_files<- 'wb_pqlseq2_agechron'
chron_age_pqlseq<- import_pqlseq(chron_age_files, y = 4)
#Age Within
age_w_files<- 'wb_pqlseq2_within_age'
age_w_pqlseq<- import_pqlseq(age_w_files, y = 5)
#Mean Age
age_m_files<- 'wb_pqlseq2_mean_age'
age_m_pqlseq<- import_pqlseq(age_m_files, y = 5)
age_w<- age_w_pqlseq  %>%
select(c(outcome, beta, fdr))
colnames(age_w)<- c("outcome", "age_w_beta", "age_w_fdr")
age_w<- age_w[age_w$outcome %in% age_eq3$outcome,]
View(age_eq3)
#Eq2 vs Eq3--------------
age_eq3<- age_eq3_pqlseq %>%
select(c(outcome, beta, fdr)) %>%
mutate(eq = "eq3")
age_w<- age_w_pqlseq  %>%
select(c(outcome, beta, fdr)) %>%
mutate(eq = "eq2")
age_w<- age_w[age_w$outcome %in% age_eq3$outcome,]
age_compare<- rbind(age_w, age_eq3)
View(age_compare)
age_compare %>%
ggplot(aes(beta, fill = eq)) +
geom_histogram(alpha=0.5)
age_compare %>%
ggplot(aes(beta, fill = eq)) +
geom_histogram(alpha=0.5, position = position_dodge())
age_compare %>%
ggplot(aes(beta, fill = eq)) +
geom_density(alpha=0.5, position = position_dodge())
age_compare %>%
filter(fdr < 0.05) %>%
ggplot(aes(beta, fill = eq)) +
geom_density(alpha=0.5, position = position_dodge())
age_compare %>%
filter(fdr < 0.05) %>%
ggplot(aes(beta, fill = eq)) +
geom_density(alpha=0.5, position = position_dodge()) +
theme_classic(base_size=24)
